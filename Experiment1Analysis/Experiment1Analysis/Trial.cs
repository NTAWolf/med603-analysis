// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.IO;
using System.Collections.Generic;


namespace Experiment1Analysis
{
	public class Trial
	{
		public const int MINIMUM_SECONDS_BETWEEN_OBSERVATIONS = 2;
		public Observation[] observations
		{
			get;
			private set;
		}

		public uint trialNumber
		{
			get;
			private set;
		}

		public float Threshold
		{
			get
			{
				return observations[observations.Length - 1].stimulus;
			}
		}

		// TODO Unit test this
		/// <summary>
		/// Gets the number of reverses in this trial, i.e. the number of times the user changed answer from positive to negative or vice versa.
		/// </summary>
		/// <value>The number of reverses.</value>
		public int NumberOfReverses
		{
			get
			{
				int count = 0;
				for(int i = 1; i < observations.Length; i++)
				{
					if(observations[i].response != observations[i - 1].response)
					{
						count++;
					}
				}

				return count;
			}
		}

		public Trial (StreamReader observationLogStream, StreamReader gazeLogStream)
		{
			// Skip forward to point where we're past headers
			string[] observationsStrings = GetLinesStartingWithDigits(observationLogStream);
			string[] gazeStrings = GetLinesStartingWithDigits(gazeLogStream);			

			List<GazeLogEntry> gazeLogs = new List<GazeLogEntry>(gazeStrings.Length);
			List<int> observationsIndices = new List<int>(10);
			observationsIndices.Add (0);

			// Populate gazeLogs with data from gazeStrings, and find indices where a new observation begins
			for(int i = 0; i < gazeStrings.Length; i++)
			{
				gazeLogs.Add (new GazeLogEntry(gazeStrings[i]));
				if(i > 0)
				{
					TimeSpan ts = gazeLogs[i].timestamp - gazeLogs[i - 1].timestamp;
					if(ts.Seconds >= MINIMUM_SECONDS_BETWEEN_OBSERVATIONS)
					{
						observationsIndices.Add (i);
					}
				}
			}

			observationsIndices.Add (gazeStrings.Length);

			observations = new Observation[observationsStrings.Length];

			// Generate Observations from the combined observation and gaze data
			for(int i = 0; i < observationsStrings.Length; i++)
			{
				int fromIndex = observationsIndices[i];
				int toIndex = observationsIndices[i + 1];
				int gazeLogCount = toIndex - fromIndex;

				GazeLogEntry[] gazeEntriesForThisObservation = new GazeLogEntry[gazeLogCount];
				gazeLogs.CopyTo(fromIndex, gazeEntriesForThisObservation, 0, gazeLogCount);

				observations[i] = new Observation(
					observationsStrings[i],
					gazeEntriesForThisObservation);
			}
		}

		public static string[] GetLinesStartingWithDigits(StreamReader stream)
		{
			List<string> lines = new List<string>(10);

			while(false == stream.EndOfStream)
			{
				string line = stream.ReadLine();
				
				if(Char.IsDigit(line, 0))
				{
					lines.Add(line);
				}
			}

			return lines.ToArray();
		}
	}
}

