// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;

namespace Experiment1Analysis
{
	public class Observation
	{
		private float[] smoothedGazeDistances = null;
		
		public float stimulus;
		public short response;
		public GazeLogEntry[] gazeEntries;

		private float  _GazeDistanceMean = -1; 
		public float GazeDistanceMean
		{
			get
			{
				if(_GazeDistanceMean < 0)
				{
					_GazeDistanceMean = Statistics.Mean(GetGazeDistances());
				}

				return _GazeDistanceMean;
			}
		}

		private float _GazeDistanceStandardDeviation = -1;
		public float GazeDistanceStandardDeviation
		{
			get
			{
				if(_GazeDistanceStandardDeviation < 0)
				{
					_GazeDistanceStandardDeviation = Statistics.StandardDeviation(GetGazeDistances());
				}
				
				return _GazeDistanceStandardDeviation;
			}
		}

		public Observation(string observationEntry, GazeLogEntry[] gazeLogEntries, double clipDurationMillis)
			: this(observationEntry.Split (new char[]{','}), gazeLogEntries)
		{
			ClipToDurationFromBeginning(clipDurationMillis);
		}


		public Observation(string observationEntry, GazeLogEntry[] gazeLogEntries)
			: this(observationEntry.Split (new char[]{','}), gazeLogEntries)
		{

		}

		public Observation(string[] observationEntry, GazeLogEntry[] gazeLogEntries)
		{
			this.stimulus = Single.Parse(observationEntry[0]);
			this.response = Int16.Parse(observationEntry[1]);

			/*List<GazeLogEntry> gazeLogs = new List<GazeLogEntry>(2500);
			foreach(string s in gazeLogEntries)
			{
				gazeLogs.Add(new GazeLogEntry(s));
             }
             
             gazeEntries = gazeLogs.ToArray();*/
			this.gazeEntries = gazeLogEntries;
		}

		public float[] GetGazeDistances()
		{
			float[] deviations = new float[gazeEntries.Length];
			for(int i = 0; i < gazeEntries.Length; i++)
			{
				deviations[i] = gazeEntries[i].distance;
			}
			return deviations;
		}

		public float[] GetSmoothedGazeDistances(int windowSize)
		{
			if(smoothedGazeDistances == null)
			{
				smoothedGazeDistances = Statistics.SmoothClip(GetGazeDistances(), windowSize);
			}

			return smoothedGazeDistances;
		}

		public float GetMaximumSmoothedGazeDistance(int windowSize)
		{
			float[] smoothed = GetSmoothedGazeDistances(windowSize);
			return Statistics.Max(smoothed);
		}

		public override string ToString ()
		{
			return string.Format ("[Observation: GazeDistanceMean={0}, GazeDistanceStandardDeviation={1}]", GazeDistanceMean, GazeDistanceStandardDeviation);
		}

		public bool GazeOutsideBounds(int maxX, int maxY)
		{
			foreach(GazeLogEntry g in gazeEntries)
			{
				if(g.IsOutsideBounds(maxX, maxY))
				{
					return true;
				}
			}

			return false;
		}

		public int GetMaxNumberOfConsecutiveReadingsWithGazeDistanceAbove(float distance)
		{
			List<int> consecutive = new List<int>(gazeEntries.Length);

			consecutive.Add (0);

			for(int i = 0; i < gazeEntries.Length; i++)
			{
				GazeLogEntry g = gazeEntries[i];

				if(g.distance > distance)
				{
					consecutive[consecutive.Count - 1]++; // Last element++
				}
				else
				{
					consecutive.Add (0); // Reset counter in a new int
				}
			}

			return Statistics.Max (consecutive.ToArray());
		}

		public void ClipToDurationFromBeginning(double durationMillis)
		{
			DateTime start = gazeEntries[0].timestamp;

			int lastIndexWithinDuration = 1;
			for( ; lastIndexWithinDuration < gazeEntries.Length; lastIndexWithinDuration++)
			{
				DateTime current = gazeEntries[lastIndexWithinDuration].timestamp;

				if(durationMillis < (current - start).TotalMilliseconds)
				{
					break;
				}
			}

			GazeLogEntry[] clipped = new GazeLogEntry[lastIndexWithinDuration + 1];
			Array.Copy(gazeEntries, clipped, lastIndexWithinDuration + 1);

			gazeEntries = clipped;
		}
	}
}

